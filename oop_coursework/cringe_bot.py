import telebot
import requests
from bs4 import BeautifulSoup
import random

class AnekdotProvider:
    def get_anekdot(self, url):
        try:
            response = requests.get(url)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'html.parser')
            anekdot_divs = soup.find_all('div', class_='topicbox')

            if anekdot_divs:
                random_div = random.choice(anekdot_divs)
                anekdot_text = random_div.find('div', class_='text')
                if anekdot_text:
                    return anekdot_text.get_text(strip=True)
                else:
                    return "–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∞–Ω–µ–∫–¥–æ—Ç —É–¥–∞–ª—ë–Ω —Å —Å–∞–π—Ç–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π" 
            else:
                return "–ê–Ω–µ–∫–¥–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"

        except requests.exceptions.RequestException as e:
            return f"–û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞: {e}"
        except Exception as e:
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"


class CommandHandler:
    def __init__(self, bot):
        self.bot = bot
        self.bot.message_handler(commands=['start'])(self.send_welcome)
        self.bot.message_handler(commands=['info'])(self.send_info)
        self.bot.message_handler(commands=['prt'])(self.send_prt)

    def send_welcome(self, message):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        category_list = list(categories.keys())
        if category_list:  
            markup.add(telebot.types.KeyboardButton(category_list[0]))
            for i in range(1, len(category_list), 2):
                row = []
                for j in range(2):
                    if i + j < len(category_list):
                        row.append(telebot.types.KeyboardButton(category_list[i + j]))
                markup.add(*row)
        self.bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –Ω–µ—Å–º–µ—à–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤, –≤–∑—è—Ç—ã—Ö —Å —Å–∞–π—Ç–∞ anekdot.ru. –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∞–Ω–µ–∫–¥–æ—Ç—ã —Å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π –∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    def send_info(self, message):
        try:
            with open('info.txt', 'r', encoding='utf-8') as file:
                content = file.read()
                self.bot.reply_to(message, content)
        except FileNotFoundError:
            self.bot.reply_to(message, "–§–∞–π–ª info.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            self.bot.reply_to(message, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


    def send_prt(self, message):
        try:
            with open('prt1.txt', 'r', encoding='utf-8') as file1, \
                    open('prt2.txt', 'r', encoding='utf-8') as file2:
                content1 = file1.read()
                content2 = file2.read()
                self.bot.reply_to(message, content1)
                self.bot.reply_to(message, content2)
        except FileNotFoundError:
            self.bot.reply_to(message, "–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ prt1.txt –∏ prt2.txt –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        except Exception as e:
            self.bot.reply_to(message, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")


class MediaHandler:
    def __init__(self, bot):
        self.bot = bot
        self.bot.message_handler(content_types=['photo'])(self.handle_photo)
        self.bot.message_handler(content_types=['video', 'video_note'])(self.handle_video)
        self.bot.message_handler(content_types=['audio', 'voice'])(self.handle_audio)


    def handle_photo(self, message):
        self.send_media(message, 'ans.jpg', 'photo')

    def handle_video(self, message):
        self.send_media(message, 'ans.mov', 'video')

    def handle_audio(self, message):
        self.send_media(message, 'ans.ogg', 'audio')

    def send_media(self, message, filename, media_type):
        try:
            with open(filename, 'rb') as media:
                if media_type == 'photo':
                    self.bot.send_photo(message.chat.id, media)
                elif media_type == 'video':
                    self.bot.send_video(message.chat.id, media)
                elif media_type == 'audio':
                    self.bot.send_audio(message.chat.id, media)
        except FileNotFoundError:
            self.bot.reply_to(message, f"–§–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            self.bot.reply_to(message, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")


class TelegramBot:
    def __init__(self, token, categories, bad_words, anekdot_provider):
        self.bot = telebot.TeleBot(token)
        self.categories = categories
        self.bad_words = bad_words
        self.anekdot_provider = anekdot_provider
        self.command_handler = CommandHandler(self.bot)
        self.media_handler = MediaHandler(self.bot)
        self.bot.message_handler(func=lambda message: True)(self.handle_message)

    def handle_message(self, message):
        username = message.from_user.username if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        print(f"User: {message.from_user.first_name} ({message.from_user.id}), Username: @{username}")

        if message.text in self.categories:
            anekdot = self.anekdot_provider.get_anekdot(self.categories[message.text])
            self.bot.reply_to(message, anekdot)
        else:
            bad_word = random.choice(self.bad_words)
            self.bot.reply_to(message, f"–≠—Ç–æ {bad_word} –∞–Ω–µ–∫–¥–æ—Ç. –í—ã –Ω–µ —Å–º—ã—Å–ª–∏—Ç–µ –≤ —é–º–æ—Ä–µ. –õ—É—á—à–µ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

    def run(self):
        self.bot.polling(none_stop=True)


token = [x for x in open('token.txt')][0]

categories = {
    '–°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç üîÑ': 'https://www.anekdot.ru/random/anekdot/',
    '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ –º—É–∂–∞ –∏ –∂–µ–Ω—É üë©‚Äç‚ù§Ô∏è‚Äçüë®': 'https://www.anekdot.ru/tags/–º—É–∂%20–∏%20–∂–µ–Ω–∞',
    '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å ü¶†': 'https://www.anekdot.ru/tags/–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å',
    '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç üåê': 'https://www.anekdot.ru/tags/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç',
    '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤ üë®‚Äçüíª': 'https://www.anekdot.ru/tags/–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
    '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ –í–æ–≤–æ—á–∫—É üë¶': 'https://www.anekdot.ru/tags/–≤–æ–≤–æ—á–∫–∞',
    '–ê–Ω–µ–∫–¥–æ—Ç—ã –ø—Ä–æ —Ç—ë—â—É üêç': 'https://www.anekdot.ru/tags/—Ç—ë—â–∞'
}

bad_words = ["–ø–ª–æ—Ö–æ–π", "—Å–∫—É—á–Ω—ã–π", "–±–µ–∑–¥–∞—Ä–Ω—ã–π", "–æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω—ã–π", "–ø–æ–∑–æ—Ä–Ω—ã–π", "–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π", "—Å–ª–∞–±—ã–π", "–∂–∞–ª–∫–∏–π", "–Ω–∏–∑–∫–æ—Å–æ—Ä—Ç–Ω—ã–π", "–Ω–∏–∫—É–¥—ã—à–Ω—ã–π"]

anekdot_provider = AnekdotProvider()
bot = TelegramBot(token, categories, bad_words, anekdot_provider)
bot.run()